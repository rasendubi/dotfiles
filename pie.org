#+TITLE: Pie

This is the configuration for the Raspberry Pi 3 running NixOS named “pie” (I know I'm very creative with names).

To build SD image (in case of full re-init):
#+begin_src sh
nix build .#nixosConfigurations.pie.config.system.build.sdImage
#+end_src

To deploy:
#+begin_src sh
nix run nixpkgs#nixos-rebuild switch --flake .#pie --target-host pie.local --use-remote-sudo --fast
#+end_src

* Outline
This file /is/ configuration. ~pie.nix~ file is exported from this one.

General outline of ~pie.nix~ file.
#+begin_src nix :tangle pie.nix :noweb no-export
#
# This file is auto-generated from "pie.org"
#
{ config, pkgs, inputs, ... }:
{
  imports = [
    "${inputs.nixpkgs}/nixos/modules/installer/sd-card/sd-image-aarch64.nix"
    inputs.agenix.nixosModules.default
    <<nixos-section>>
  ];
}
#+end_src

~<<nixos-section>>~ is replaced with individual sections from this file. They are merged together by NixOS module system.

* General
Set host name and fix “state version.” State version is mostly used to determine the layout of different databases, so NixOS update does not break backward compatibility.

#+name: nixos-section
#+begin_src nix
{
  networking.hostName = "pie";

  system.stateVersion = "19.09";

  # Disable any documentation to free up some space
  documentation.enable = false;

  boot.initrd.systemd.emergencyAccess = true;
}
#+end_src

* Flake
This configuration is provided as a Nix Flake.

Flake support is still experimental, so we need to go through a couple of extra hoops to enable it.
#+name: nixos-section
#+begin_src nix
{
  nix = {
    settings.trusted-users = ["@wheel"];
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
  };
}
#+end_src

* Remote access
This is the headless host—it does not have monitor/keyboard—so I only access it by SSH.

Enable OpenSSH and add my user with my SSH key.
#+name: nixos-section
#+begin_src nix
{
  services.openssh = {
    enable = true;
    settings = {
      PasswordAuthentication = false;
      PermitRootLogin = "no";
    };
  };

  users.users.rasen = {
    isNormalUser = true;
    openssh.authorizedKeys.keys = [
      "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHH15uiQw3jBbrdlcRb8wOr8KVltuwbHP/JOFAzXFO1l/4QxnKs6Nno939ugULM7Lu0Vx5g6FreuCOa2NMWk5rcjIwOzjrZnHZ7aoAVnE7H9scuz8NGnrWdc1Oq0hmcDxdZrdKdB6CPG/diGWNZy77nLvz5JcX1kPLZENPeApCERwR5SvLecA4Es5JORHz9ssEcf8I7VFpAebfQYDu+VZZvEu03P2+5SXv8+5zjiuxM7qxzqRmv0U8eftii9xgVNC7FaoRBhhM7yKkpbnqX7IeSU3WeVcw4+d1d8b9wD/sFOyGc1xAcvafLaGdgeCQGU729DupRRJokpw6bBRQGH29 rasen@omicron"
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIulco7Hi0uJ90GLwuDvgG/Xlv/i2R4ySa5+/dOYygsr rasen@bayraktar"
    ];
    extraGroups = [ "wheel" ];
  };
}
#+end_src

Broadcast itself:
#+name: nixos-section
#+begin_src nix
{
  services.avahi = {
    enable = true;
    nssmdns4 = true;
    publish = {
      enable = true;
      addresses = true;
      userServices = true;
    };
  };
}
#+end_src
** Tools
A couple of extra tools for when I ssh in.
#+name: nixos-section
#+begin_src nix
{
  programs.mosh.enable = true;
  environment.systemPackages = [
    pkgs.vim
    pkgs.psmisc
  ];
}
#+end_src

* OpenVPN
It is a member of my VPN (so I can access it from anywhere).

#+name: nixos-section
#+begin_src nix
# {
#   services.openvpn.servers.nano-vpn = {
#     # vendored ovpn config with secrets, etc.
#     config = ''
#       config /root/openvpn/nano-vpn.ovpn
#     '';
#   };
# }
#+end_src

* Gitolite

#+name: nixos-section
#+begin_src nix
{
  services.gitolite = {
    enable = true;
    enableGitAnnex = true;
    user = "git";
    adminPubkey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIulco7Hi0uJ90GLwuDvgG/Xlv/i2R4ySa5+/dOYygsr rasen@bayraktar";
    dataDir = "/run/media/ext-data/gitolite";
  };
}
#+end_src

* Borg backup server
Provide backup server for my other hosts.
#+name: nixos-section
#+begin_src nix
{
  services.borgbackup.repos = {
    borg = {
      path = "/run/media/ext-data/borg";
      authorizedKeys = [
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSqvRXKfEb52vB6QfLWUnuAD9KqJB8AtQ4STRA8cpFIRElU/3jJ2oUxZv2NF/cBefsK0BZ7ayLXpcOHyAMgUnoJqzmzzBkmmPPHC5lcz6jlLIhr2BjAFbtCKz25xjherqc7a/A47YnV6nLlS+yKuDxzal1HYAEKLGz6SHkqBIjW1u8QFDnZt+MtFqFNN1BqNFqmBKkuHYewynF/gON/d9M+759mCjNwzEqbKig3v6dWP1iD5gqupsn1AInrDehoENDpCeJzwL+2ZL30bor7lBvEoAqNmfezLLsZKzRBECobwCsI6FzZcF/qlF667ZqSpkW0wEYQGCjHXDANstkO1qR root@omicron"
        "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIulco7Hi0uJ90GLwuDvgG/Xlv/i2R4ySa5+/dOYygsr rasen@bayraktar"
      ];
    };
  };
}
#+end_src
** Backup drive
Backups are stored on external 1 TB hard-drive.
#+name: nixos-section
#+begin_src nix
{
  # Do not auto-create borg repo
  systemd.services.borgbackup-repo-borg.enable = false;

  # Prepare mount point
  system.activationScripts = {
    ensure-ext-data = {
      text = ''
        mkdir -p /run/media/ext-data
      '';
      deps = [];
    };
  };

  # Configure auto-mountable drive
  fileSystems."/run/media/ext-data" = {
    device = "/dev/disk/by-uuid/63972645-dbc8-4543-b854-91038b2da6cb";
    fsType = "ext4";
    options = [
      "noauto"                       # do not mount on boot
      "nofail"
      "x-systemd.automount"          # mount when needed
      "x-systemd.device-timeout=1ms" # device should be plugged already—do not wait for it
      "x-systemd.idle-timout=5m"     # unmount after 5 min of inactivity
    ];
  };
}
#+end_src
* Hardware
Boring stuff.
** Boot
#+name: nixos-section
#+begin_src nix
{
  boot.loader.grub.enable = false;
  boot.loader.generic-extlinux-compatible.enable = true;

  # boot.kernelPackages = pkgs.linuxKernel.packages.linux_rpi3;

  # fix the following error:
  # modprobe: FATAL: Module ahci not found in directory
  # https://github.com/NixOS/nixpkgs/issues/154163#issuecomment-1350599022
  # nixpkgs.overlays = [
  #   (_final: super: {
  #     makeModulesClosure = x: super.makeModulesClosure (x // { allowMissing = true; });
  #   })
  # ];

  # Enable TTY
  boot.kernelParams = [
    "cma=32M"
    "console=ttyS1,115200n8"
    "console=ttyS0,115200n8"
  ];
}
#+end_src
** Wi-Fi
#+name: nixos-section
#+begin_src nix
{
  networking.wireless.enable = true;

  age.secrets.wireless_secrets.file = ./secrets/wireless_secrets.age;
  networking.wireless.secretsFile = config.age.secrets.wireless_secrets.path;

  networking.wireless.networks."Rotem Indiana".pskRaw = "ext:rotem_indiana";
  networking.wireless.networks."Rotem Indiana".priority = 10;
  networking.wireless.networks."Rotem Indiana_Guest".pskRaw = "ext:rotem_indiana_guest";
  networking.wireless.networks."Rotem Indiana_Backup".pskRaw = "ext:rotem_indiana_backup";

  hardware.enableRedistributableFirmware = true;

  # doesn’t seem to be needed anymore
  # hardware.firmware = [
  #   (pkgs.stdenv.mkDerivation {
  #     name = "broadcom-rpi3bplus-extra";
  #     src = pkgs.fetchurl {
  #       url = "https://raw.githubusercontent.com/RPi-Distro/firmware-nonfree/b518de4/brcm/brcmfmac43455-sdio.txt";
  #       sha256 = "0r4bvwkm3fx60bbpwd83zbjganjnffiq1jkaj0h20bwdj9ysawg9";
  #     };
  #     phases = [ "installPhase" ];
  #     installPhase = ''
  #       mkdir -p $out/lib/firmware/brcm
  #       cp $src $out/lib/firmware/brcm/brcmfmac43455-sdio.txt
  #     '';
  #   })
  # ];
}
#+end_src
** Partitions
#+name: nixos-section
#+begin_src nix
{
  swapDevices = [ { device = "/swapfile"; size = 1024; } ];
}
#+end_src
